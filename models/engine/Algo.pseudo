<class 'BaseModel'> -> to_dict() -> <class 'dict'> -> <class 'BaseModel'>
///*************************************///
<class 'BaseModel'> -> to_dict() -> <class 'dict'> -> JSON dump -> <class 'str'> -> FILE -> 
<class 'str'> -> JSON load -> <class 'dict'> -> <class 'BaseModel'>
///*************************************///
simple Python data structure: { '12': { 'numbers': [1, 2, 3], 'name': "John" } }
JSON string representation:  '{ "12": { "numbers": [1, 2, 3], "name": "John" } }'
///*************************************///
FileStorage:
    __file_path <<string>> path to the JSON file
    __objects <<dictionary>> empty
        will store all objects by <class name>.id
        (ex: to store a BaseModel object with id=12121212,the key will be BaseModel.12121212)

    all(self):
        return __objects

    new(self, obj):
        sets in __objects the obj with
        ---> (key-format) <obj class name>.id


    save(self):
        serialize -> __objects
        save at __file_path
        //algo
        var1 (dictionary)
        loop in __objects
            convert each object to dict
            and add it to var1
        store var1 in json file

    reload(self):
        if the JSON file (__file_path) exists
            deserializes the JSON file to __objects
        else
            do nothing 
        ###(If the file doesnâ€™t exist, no exception should be raised)###
        //algo
        try:
            open file
            data <dictionary> = load
            for key, value in data
                creat opject from data
                save opject in __objects


        except NotFoundFile:
            pass
